from telegram import BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from utils.logger import logger
from handlers.file_handlers import process_file, finalize_incident
from utils.api_utils import fetch_incident_types, send_location_to_backend, send_incident_to_backend

# States for the conversation
TITLE, DESCRIPTION, SELECT_TYPE = range(3)

# Structure for current incident
incident_data = {
    'files': [],
    'title': None,
    'description': None,
    'incidentType': None,
    'address': None,
}

def generate_keyboard(minimal=False):
    """
    Generates a dynamic keyboard based on the current state of incident_data.
    If minimal=True, generates a keyboard with only /start_incident.
    """
    if minimal:
        return ReplyKeyboardMarkup([["üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç"]], resize_keyboard=True, one_time_keyboard=False)

    keyboard = [["üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç"]]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    if incident_data['title'] or incident_data['description'] or incident_data.get('location') or incident_data.get('files'):
        keyboard = []
        keyboard.append([KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º
        incident_buttons = []
        if incident_data.get('files'):
            incident_buttons.append("üìÅ –§–∞–π–ª—ã")
        incident_buttons.append("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        incident_buttons.append("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        keyboard.append(incident_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if incident_data['title'] and incident_data['description'] and incident_data.get('files') and incident_data.get('address'):
            keyboard.append(["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç"])

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends a welcome message and displays available commands with a keyboard.
    """
    logger.info(f"User {update.effective_user.username} used /start")

    commands_list = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—à–µ—Ö–æ–¥–∞! üëã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏.
"""
    reply_markup = generate_keyboard()
    await update.message.reply_text(commands_list, reply_markup=reply_markup)

async def start_incident(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Starts the incident creation process and asks for a title.
    """
    logger.info(f"User {update.effective_user.username} started incident creation.")
    # Clear existing incident data
    incident_data['files'] = []
    incident_data['title'] = None
    incident_data['description'] = None
    incident_data['incidentType'] = None
    incident_data['address'] = None

    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞\").",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    )
    
    return TITLE

async def set_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Captures the title of the incident and asks for a description.
    """
    incident_data['title'] = update.message.text
    logger.info(f"Incident title set: {incident_data['title']}")
    
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ú–∞—à–∏–Ω–∞ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ\").",
        reply_markup=reply_markup
    )
    
    return DESCRIPTION

async def set_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Captures the description of the incident and proceeds to type selection.
    """
    incident_data['description'] = update.message.text
    logger.info(f"Incident description set: {incident_data['description']}")

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    await update.message.reply_text("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    await choose_incident_type(update, context)
    return SELECT_TYPE

async def choose_incident_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Allows the user to select a new type of the incident for editing.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
    incident_types = fetch_incident_types()  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å "name" –∏ "id"

    if not incident_types:
        # –û—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["incident_types"] = {t["name"]: t["id"] for t in incident_types}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    keyboard = [[t["name"]] for t in incident_types] + [["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

    return SELECT_TYPE



async def set_incident_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Captures the selected incident type and ends the conversation.
    """
    selected_type = update.message.text
    incident_types = context.user_data.get("incident_types", {})

    logger.info(f"User selected type: {selected_type}")
    logger.info(f"Available types: {incident_types}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if selected_type == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel(update, context)
    elif selected_type in incident_types:
        incident_data["incidentType"] = {
            "id": incident_types[selected_type],
            "name": selected_type,
        }

        logger.info(f"Incident type set: {incident_data['incidentType']}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = generate_keyboard()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            f"‚úÖ –¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {selected_type}\n\n"
            "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
            "üìç –¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return SELECT_TYPE



async def add_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Processes a photo or video sent by the user and adds it to the incident.
    """
    logger.info(f"User {update.effective_user.username} sent a file.")
    try:
        await process_file(update, incident_data)
        reply_markup = generate_keyboard()
        files_count = len(incident_data.get("files", []))
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! (–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files_count})", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error while adding file: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def save_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Saves the user's location (latitude and longitude) and verifies it via the backend.
    """
    if update.message.location:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        backend_response = send_location_to_backend(latitude, longitude)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
        if "error" in backend_response:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {backend_response['error']}")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∞–¥—Ä–µ—Å–∞
        incident_data['location'] = {
            'id': backend_response['id'],
            'latitude': latitude,
            'longitude': longitude
        }
        incident_data['address'] = backend_response.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        reply_markup = generate_keyboard()

        await update.message.reply_text(
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
            f"üìå –ê–¥—Ä–µ—Å: {incident_data['address']}",
            reply_markup=reply_markup
        )
        
        # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        if incident_data['title'] and incident_data['description'] and incident_data.get('files') and incident_data.get('address'):
            await update.message.reply_text(
                "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=reply_markup
            )
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles editing of incident fields based on user selection.
    """
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if query.data == "edit_title":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")
        context.user_data["editing_field"] = "title"
    elif query.data == "edit_description":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")
        context.user_data["editing_field"] = "description"
    elif query.data == "edit_location":
        await query.edit_message_text("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        context.user_data["editing_field"] = "location"
    elif query.data == "edit_type":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        await query.answer()
        await choose_incident_type(update, context)
        context.user_data["editing_field"] = "incident_type"

async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Saves the edited field to the incident data.
    """
    editing_field = context.user_data.get("editing_field")
    if not editing_field:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    if editing_field == "title":
        incident_data["title"] = update.message.text
        await update.message.reply_text(f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "{incident_data["title"]}"')
    elif editing_field == "description":
        incident_data["description"] = update.message.text
        await update.message.reply_text(f'‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "{incident_data["description"]}"')
    elif editing_field == "location":
        await update.message.reply_text("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    elif editing_field == "incident_type":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        selected_type = update.message.text
        incident_types = context.user_data.get("incident_types", {})

        if selected_type in incident_types:
            incident_data["incidentType"] = {
                "id": incident_types[selected_type],
                "name": selected_type,
            }
            reply_markup = generate_keyboard()
            await update.message.reply_text(f"‚úÖ –¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {selected_type}", reply_markup=reply_markup)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return

    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data["editing_field"] = None

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    summary = generate_summary_message()
    reply_markup = generate_keyboard()
    await update.message.reply_text("üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n\n" + summary, reply_markup=reply_markup)




async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Cancels the conversation.
    """
    incident_data['files'].clear()
    incident_data['title'] = None
    incident_data['description'] = None
    incident_data['address'] = None
    incident_data["incidentType"] = None
    logger.info("Incident data cleared.")
    
    keyboard = [
        ["üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    logger.info(f"User {update.effective_user.username} cancelled the incident creation.")
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.", reply_markup=reply_markup
    )
    return ConversationHandler.END


def generate_summary_message():
    """
    Generates a summary of the current incident data.
    """
    title = incident_data.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    description = incident_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    address = incident_data.get("address", "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ incidentType ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    incident_type_data = incident_data.get("incidentType")
    if isinstance(incident_type_data, dict):
        incident_type = incident_type_data.get("name", "–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
    else:
        incident_type = "–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"

    files_count = len(incident_data.get("files", []))

    summary = (
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {address}\n"
        f"–¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {incident_type}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {files_count}\n"
    )
    return summary


def generate_file_keyboard():
    """
    Generates an inline keyboard with options to delete individual files or all files.
    """
    keyboard = []

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for idx, file in enumerate(incident_data["files"]):
        keyboard.append([
            InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {idx + 1}", callback_data=f"delete_file_{idx}")
        ])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if incident_data["files"]:
        keyboard.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", callback_data="delete_all_files")])

    return InlineKeyboardMarkup(keyboard)

async def show_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the "üìÅ –§–∞–π–ª—ã" button press from the main keyboard.
    Shows all uploaded files with options to delete them.
    """
    logger.info(f"User {update.effective_user.username} requested to view files.")
    
    if not incident_data["files"]:
        await update.message.reply_text("–§–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for idx, file in enumerate(incident_data["files"]):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª", callback_data=f"delete_file_{idx}")]
        ])

        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
            if file.file_id and file.file_path.endswith(('.jpg', '.png')):
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=file.file_id,
                    reply_markup=keyboard
                )
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
            elif file.file_id and file.file_path.endswith('.mp4'):
                await context.bot.send_video(
                    chat_id=update.message.chat_id,
                    video=file.file_id,
                    reply_markup=keyboard
                )
            else:
                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file.file_id}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {idx + 1}."
            )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    delete_all_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", callback_data="delete_all_files")]
    ])
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:",
        reply_markup=delete_all_keyboard
    )

async def show_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the "üìÅ –§–∞–π–ª—ã" button press from the main keyboard.
    Shows all uploaded files with options to delete them.
    """
    logger.info(f"User {update.effective_user.username} requested to view files.")
    
    if not incident_data["files"]:
        await update.message.reply_text("–§–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for idx, file in enumerate(incident_data["files"]):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª", callback_data=f"delete_file_{idx}")]
        ])

        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
            if file.file_id and file.file_path.endswith(('.jpg', '.png')):
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=file.file_id,
                    reply_markup=keyboard
                )
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
            elif file.file_id and file.file_path.endswith('.mp4'):
                await context.bot.send_video(
                    chat_id=update.message.chat_id,
                    video=file.file_id,
                    reply_markup=keyboard
                )
            else:
                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file.file_id}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {idx + 1}."
            )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    delete_all_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", callback_data="delete_all_files")]
    ])
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:",
        reply_markup=delete_all_keyboard
    )

async def show_files_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends each uploaded file back to the user with an option to delete.
    This function is called from callback queries.
    """
    query = update.callback_query
    await query.answer()

    if not incident_data["files"]:
        await query.edit_message_text("–§–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for idx, file in enumerate(incident_data["files"]):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª", callback_data=f"delete_file_{idx}")]
        ])

        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
            if file.file_id and file.file_path.endswith(('.jpg', '.png')):
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=file.file_id,
                    reply_markup=keyboard
                )
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
            elif file.file_id and file.file_path.endswith('.mp4'):
                await context.bot.send_video(
                    chat_id=query.message.chat_id,
                    video=file.file_id,
                    reply_markup=keyboard
                )
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file.file_id}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {idx + 1}."
            )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    delete_all_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", callback_data="delete_all_files")]
    ])
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:",
        reply_markup=delete_all_keyboard
    )


async def delete_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the deletion of a single file or all files.
    """
    query = update.callback_query
    await query.answer()

    if query.data.startswith("delete_file_"):
        file_idx = int(query.data.split("_")[-1])

        if 0 <= file_idx < len(incident_data["files"]):
            deleted_file = incident_data["files"].pop(file_idx)
            logger.info(f"File deleted: {deleted_file.file_id}")
            await query.message.reply_text(f"–§–∞–π–ª {file_idx} —É–¥–∞–ª—ë–Ω.")
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif query.data == "delete_all_files":
        incident_data["files"].clear()
        logger.info("All files deleted.")
        await query.message.reply_text("–í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")


async def finish_incident(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Directly sends the incident data to the backend without additional confirmation steps
    """
    logger.info(f"User {update.effective_user.username} used finish_incident.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è
    if not incident_data["title"] or not incident_data["description"] or not incident_data.get("files") or not incident_data.get("address"):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–π–ª—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    sending_message = await update.message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    try:
        zip_buffer = await finalize_incident(incident_data)
        await send_incident_to_backend(zip_buffer, incident_data, update)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await sending_message.edit_text("‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        logger.info("Incident successfully sent to the backend.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        incident_data['files'].clear()
        incident_data['title'] = None
        incident_data['description'] = None
        incident_data['address'] = None
        incident_data["incidentType"] = None
        logger.info("Incident data cleared.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = generate_keyboard(minimal=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text("üöÄ –•–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–æ–≤–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ?", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error while sending data: {e}")
        await sending_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
async def edit_data_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Shows the current incident data and options to edit fields or send the data.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    summary = generate_summary_message()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title"), InlineKeyboardButton("‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="edit_location"), InlineKeyboardButton("üîç –¢–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞", callback_data="edit_type")],
        [InlineKeyboardButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", callback_data="show_files")]
    ]
    
    # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    if incident_data['title'] and incident_data['description'] and incident_data.get('files') and incident_data.get('address'):
        keyboard.append([InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç", callback_data="confirm_send")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üìã –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n\n" + summary, reply_markup=reply_markup)
    
async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Requests the user's location with a button.
    """
    logger.info(f"User {update.effective_user.username} used /send_location.")
    
    reply_markup = generate_keyboard()
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )
    
async def confirm_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends the incident data to the backend from inline keyboard button.
    """
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è
    if not incident_data["title"] or not incident_data["description"] or not incident_data.get("files") or not incident_data.get("address"):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–π–ª—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
        return

    await query.edit_message_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    try:
        zip_buffer = await finalize_incident(incident_data)
        await send_incident_to_backend(zip_buffer, incident_data, update)
        await query.edit_message_text("‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        logger.info("Incident successfully sent to the backend.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        incident_data['files'].clear()
        incident_data['title'] = None
        incident_data['description'] = None
        incident_data['address'] = None
        incident_data["incidentType"] = None
        logger.info("Incident data cleared.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = generate_keyboard(minimal=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.message.reply_text("üöÄ –•–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–æ–≤–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ?", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error while sending data: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

