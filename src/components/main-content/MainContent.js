import React, { useState, useEffect } from "react";
import { Routes, Route, Link } from "react-router-dom";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Card from "../card/Card";
import Graph from "../graph/Graph";
import { format } from "date-fns";
import DashboardSection from "../dashboard-section/DashboardSection";
import "../../App.css";

const getGreeting = () => {
  const hour = new Date().getHours();
  if (hour >= 5 && hour < 12) return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
  if (hour >= 12 && hour < 18) return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
  return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
};

const MainContent = () => {
  const [greeting, setGreeting] = useState(getGreeting());
  const [dateRange, setDateRange] = useState([new Date(), new Date()]);
  const [startDate, endDate] = dateRange;
  const [incidents, setIncidents] = useState([]);
  const [loading, setLoading] = useState(true);

  const API_URL = process.env.REACT_APP_API_URL;

  useEffect(() => {
    const interval = setInterval(() => {
      setGreeting(getGreeting());
    }, 60000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    fetchRecentIncidents();
  }, []);

  const fetchRecentIncidents = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/incidents`);
      if (!response.ok) throw new Error("Failed to fetch data");
      const allIncidents = await response.json();

      // Sort by `createdAt` (most recent first) & take the last 5 incidents
      const recentIncidents = allIncidents
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        .slice(0, 5);

      setIncidents(recentIncidents);
    } catch (error) {
      console.error("Error fetching incidents:", error);
      setIncidents([]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="content">
      <h1 style={{ marginBottom: "0.5rem" }}>{greeting}</h1>

      <Routes>
        <Route
          path="/"
          element={
            <>
              {/* Dashboard Section with Graph */}
              <DashboardSection title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π">
                <div className="dashboard-cards">
                  {/* Graph Card */}
                  <Card className="card">
                    <Graph startDate={startDate} endDate={endDate} />
                  </Card>

                  {/* Calendar Card */}
                  <Card className="calendar-card">
                    <div className="calendar-container">
                      <DatePicker
                        selectsRange={true}
                        startDate={startDate}
                        endDate={endDate}
                        onChange={(update) => setDateRange(update)}
                        dateFormat="dd-MM-yyyy"
                        inline
                      />
                      {startDate && endDate && (
                        <p
                          className="history-link-hint"
                          onClick={() => {
                            const formattedStart = format(
                              startDate,
                              "dd-MM-yyyy"
                            );
                            const formattedEnd = format(endDate, "dd-MM-yyyy");

                            window.localStorage.setItem(
                              "historyDateRange",
                              JSON.stringify([formattedStart, formattedEnd])
                            );

                            window.location.href = "/history";
                          }}
                        >
                          üîç –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                        </p>
                      )}
                    </div>
                  </Card>
                </div>
              </DashboardSection>

              {/* Recent Incidents Section */}
              <DashboardSection title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è">
                <div className="incidents-container main-screen-container">
                  {loading ? (
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                  ) : incidents.length === 0 ? (
                    <p style={{ color: "gray" }}>–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π</p>
                  ) : (
                    incidents.map((incident, index) => (
                      <div key={index} className="incident-card">
                        <strong>{incident.title}</strong>
                        <p>
                          <strong>–ê–¥—Ä–µ—Å:</strong>{" "}
                          {incident.locationResponseDto?.address || "–ù–µ —É–∫–∞–∑–∞–Ω"}
                        </p>
                        <p>
                          <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {incident.description}
                        </p>
                        <a
                          href={`/incidents/${incident.id}`}
                          className="read-more"
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ...
                        </a>
                      </div>
                    ))
                  )}
                </div>
              </DashboardSection>
            </>
          }
        />
      </Routes>
    </div>
  );
};

export default MainContent;
